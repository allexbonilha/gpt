/*
  PROIBIDOS: NÃO USAR, PINOS DE CONEXÃO COM A MEMORIA FLASH SPI INTERNA.
    GPIO: 6-11

  FUNCIONA SOMENTE COMO INPUT: SEM PULL-UP E PULL-DOWNS.
    GPIO: 34-36, 39

  PINOS DE STRAPPING:
    GPIO-12 DETERMINA A TENSÃO DO REGULADOR INTERNO, PULL-DOWN INTERNO E DEVE SER MANTIDO ASSIM DURANTE A INICIALIZAÇÃO
    GPIO-15 HABILITA OU DESABILITA AS MENSAGENS ENVIADAS PELA SERIAL DURANTE O BUT.

  PINOS PARA ENTRAR EM MODO DE GRAVAÇÃO: SE GPIO-0 E GPIO-2 INICIAR EM 0 ENTRA EM MODO DE GRAVAÇÃO
    GPIO-0 *PULL-UP INTERONO, 
    GPIO-2 *PULL-DOWN INTERNO, 

  PINOS QUE INICIALIZAM EM 1 OU EMITE SINAIS PWM:
    GPIO-0 PWM
    GPIO-1 TX
    GPIO-3 RX
    GPIO-5 PWM
    GPIO-14 PWM
    GPIO-15 PWM

  RECOMENDADOS INPUT E OUTPUT:
  GPIO-4, 13, 16-19, 21-23, 25-27, 32,33
*/

//  Bibliotecas ------------------------------------------------------------------------------
  #include <Arduino.h>
  #include <WiFi.h>
  //#include <HTTPClient.h>
  #include <WiFiManager.h>
  #include <EEPROM.h> 
  #include <Bounce2.h>
  //#include <esp_task_wdt.h>
  #include <Wire.h> // Allex
  #include <WebSocketsClient.h> // Allex
  #include <WiFiClientSecure.h> // Allex
  #include <ArduinoJson.h> // Allex
  #include <Adafruit_GFX.h> // Allex
  #include <Adafruit_SSD1306.h> // Allex

//  Final Bibliotecas ------------------------------------------------------------------------

//  Definições de configuração da EEPROM -----------------------------------------------------
  #define EEPROM_SIZE 256
  #define EEPROM_ADDR_TEMPO_PULSO  0
  #define EEPROM_ADDR_CREDITO      2
  #define EEPROM_ADDR_DECREMENTO   4
  #define EEPROM_ADDR_ID_MAQUINA  10 // Endereço de início na EEPROM para o valor do id maquina
  #define EEPROM_ADDR_STORE_ID    50 
  #define EEPROM_ADDR_EMAIL       60  
  #define EEPROM_ADDR_URL         128  

  #define MAX_ID_MAQUINA_LENGTH 37
  #define MAX_STORE_ID_LENGTH    9
  #define MAX_EMAIL_LENGTH      64
  #define MAX_URL_LENGTH        125
//  Final Configurações EEPROM ---------------------------------------------------------------

//  Definições Globais  ----------------------------------------------------------------------
 
  #define SCREEN_WIDTH 128  // Largura do display OLED
  #define SCREEN_HEIGHT 64  // Altura do display OLED
  #define OLED_RESET    -1  // O display OLED não possui pino de reset
  #define SCREEN_ADDRESS 0x3C  // Endereço I2C do display OLED

  Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
//  Final Definições Globais  ----------------------------------------------------------------

// Variáveis globais  ------------------------------------------------------------------------
  char idMaquina[MAX_ID_MAQUINA_LENGTH];
  char storeId[MAX_STORE_ID_LENGTH];
  char email[MAX_EMAIL_LENGTH];
  char url[MAX_URL_LENGTH];

  String maquinaUUID;
  String tempoPulsoPrint;
  String storeIdPrint;
  String emailPrint;
  String urlPrint;
  String serverUrl;
  String urlWebSocket;
  //const String serverUrl = "https://ab-machine-pay-novo-9e7064a3d0a0.herokuapp.com";

  //  VARIAVEIS:
  int tempoPulso = 0; 
  int led_B_State = LOW; 
  int credito = 0;
  int fimCredito = 0;
  int decremento = 0;
  int fimDecremento = 0;
  int contResetWifi = 0;
  int valor2 = 0;
  int valor = 0;
  int tempo_LCD = 0; //tempo da tela = tempo_LCD * 100ms do void loop() 
  boolean lendoPix = false;
  boolean serverOFF = false;
  //  WebSocket
  WebSocketsClient webSocket;
  bool conectado = false;
  int command = 0;
  const int SEND = 0; 

  //  INTERVALO CONSULTA PIX:
  unsigned long previousMillis = 0;
  const long interval = 10; // intervalo em milissegundos (5 segundos)

// Final Variaveis Globais  ------------------------------------------------------------------

//  CLASSIFICAÇÃO DAS PORTAS:
  const int rele = 23;                  // PIX            ok                        
  const int especie = 34;               //                ok
  const int decrementar = 35;           //                ok
  const int centro = 25;                // = 9999         ok
  const int cima = 27;                  // = 5555         ok
  const int direita = 26;               // = 6666         ok
  const int baixo = 33;                 // = 7777         ok
  const int esquerda = 32;              // = 8888         ok

  const int joystick = 12;       // = 4444
  const int tela = 13;         // = 4444
  const int configura = 14;    // = 1111                                                                ok
  
  const int led_B = 4;   //25;   //LED AZUL - ACESO: Captive Portal Aberto; PISCANDO: Dinheiro Creditado;      ok
  const int led_G = 2;   //26;   //LED VERDE - ACESO: ONLINE e Funcionando; PISCANDO: PIX;                     ok
  const int led_R = 15;   //27;    //LED VERMELHO - ACESO: OFFLINE SEM Wi-fi; PISCANDO: Wi-fi SEM conexão.      ok
  const int resetWifi = 39;  //GIOP4 Reset credenciais do Wi-Fi  //const int resetWifi = 0;              ok   
// Final Classificação das Portas -----------------------------------------------------------

//  Instância do objeto Bounce----------------------------------------------------------------
  Bounce debouncer_especie = Bounce();
  Bounce debouncer_decrementar = Bounce();
//  Final Objeto Bounce ----------------------------------------------------------------------

//  Definições Tarefas  ----------------------------------------------------------------------
  TaskHandle_t Task1; //TAREFA 1 - PROCESSADOR 1
  TaskHandle_t Task2; //TAREFA 2 - PROCESSADOR 2
//  Final Definições Tarefas  ----------------------------------------------------------------

//  Inicio  Variaveis de Imagem ------------------------------------------------------------------ 
  const unsigned char logo_inicial[] PROGMEM = 
  {
    // Dados do bitmap gerado (substitua por seus próprios dados)
    // Exemplo de dados fictícios (por favor, substitua com os dados reais)
    // Dados fictícios aqui
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x20, 0x00, 0x00, 0x00, 0xf8, 0x00, 
    0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x01, 
    0xfe, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x60, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x03, 0x03, 0x00, 
    0x00, 0x00, 0x38, 0x0e, 0xe0, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 
    0x38, 0x06, 0xe0, 0x00, 0x1f, 0x84, 0x03, 0x00, 0x00, 0x06, 0x01, 0x80, 0x00, 0x00, 0x38, 0x06, 
    0xe6, 0x06, 0x3f, 0xe4, 0x03, 0x3f, 0x10, 0x1e, 0x01, 0xbf, 0x87, 0xe0, 0x38, 0x0e, 0xee, 0x06, 
    0x7f, 0xe4, 0x03, 0x21, 0x98, 0x16, 0x01, 0xb0, 0xce, 0x30, 0x3f, 0xfe, 0xee, 0x06, 0x70, 0xf4, 
    0x03, 0x00, 0xd8, 0x36, 0x03, 0x00, 0x4c, 0x18, 0x3f, 0xfe, 0xee, 0x07, 0xe0, 0x74, 0x06, 0x00, 
    0xc8, 0x36, 0x07, 0x00, 0xc8, 0x18, 0x3f, 0xfe, 0xee, 0x07, 0xff, 0xf5, 0xfc, 0x1f, 0xcc, 0x66, 
    0xfe, 0x1f, 0xc8, 0x18, 0x38, 0x06, 0xee, 0x07, 0xff, 0xf4, 0x00, 0x7f, 0xcc, 0x66, 0x00, 0x3f, 
    0xc8, 0x18, 0x38, 0x06, 0xee, 0x07, 0xe0, 0x04, 0x00, 0x60, 0xc4, 0x46, 0x00, 0x60, 0x48, 0x18, 
    0x38, 0x06, 0xee, 0x07, 0xe0, 0x64, 0x00, 0xc0, 0xc6, 0xc6, 0x00, 0x60, 0x48, 0x18, 0x3c, 0x0e, 
    0xef, 0x0e, 0x70, 0xf4, 0x00, 0xc0, 0xc2, 0xc6, 0x00, 0x60, 0xc8, 0x18, 0x3f, 0xfe, 0xe7, 0xfe, 
    0x7f, 0xe4, 0x00, 0x61, 0xc3, 0x86, 0x00, 0x60, 0xcc, 0x38, 0x3f, 0xfc, 0xc7, 0xfc, 0x3f, 0xc4, 
    0x00, 0x7f, 0xc3, 0x86, 0x00, 0x3f, 0xc7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x00, 0x1e, 
    0xc1, 0x82, 0x00, 0x1f, 0x43, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
    0x08, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0c, 0x38, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    // Continue com os dados do bitmap real
  };
  const unsigned char sem_wifi[] PROGMEM = 
  {
    // 'OffLine Sem Wifi', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x30, 0x04, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x63, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0x07, 0x9b, 0xb0, 0x60, 0x33, 0xde, 0x79, 0xb3, 0x1e, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0f, 0x0c, 0x99, 0xd8, 0x78, 0x36, 0x6c, 0xcd, 0xdd, 0xa3, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xcc, 0xd9, 0x98, 0x3e, 0x37, 0x0c, 0xcd, 0x99, 0x8f, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xef, 0xd9, 0x98, 0x0f, 0x33, 0xcc, 0xfd, 0x99, 0x9b, 0x04, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x6c, 0x19, 0x98, 0x03, 0x30, 0xec, 0xc1, 0x99, 0xb3, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0x6c, 0xd9, 0x98, 0x63, 0x36, 0x6c, 0xcd, 0x99, 0xb3, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xc7, 0x99, 0x98, 0x3e, 0x33, 0xc6, 0x79, 0x99, 0x9f, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0d, 0xc3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x19, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xbf, 0xc3, 0x03, 0x6c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x99, 0x03, 0x03, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x99, 0x03, 0x03, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x99, 0x83, 0x03, 0x66, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x99, 0xbb, 0x03, 0x66, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x19, 0x03, 0x03, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x19, 0x03, 0xf3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x01, 0x8e, 0x38, 0x1f, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x31, 0x80, 0x00, 0x01, 0x8e, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x30, 0x1e, 0x6e, 0xc0, 0xde, 0x78, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x3c, 0x32, 0x77, 0x60, 0xdf, 0x78, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x33, 0x66, 0x60, 0xdb, 0x78, 0x1f, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xbf, 0x66, 0x60, 0xfb, 0xf8, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xb0, 0x66, 0x60, 0x71, 0xd9, 0xd8, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x31, 0xb3, 0x66, 0x60, 0x71, 0xd8, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x0e, 0x66, 0x60, 0x71, 0xd8, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xc0, 0x00, 
    0x03, 0x7f, 0xc0, 0x0f, 0xf9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x37, 0xfc, 0x00, 
    0x01, 0xbf, 0xf8, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x1b, 0xff, 0x80, 
    0x0e, 0xc0, 0x3c, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0xec, 0x03, 0xc0, 
    0x1c, 0xff, 0xce, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe1, 0xcf, 0xfc, 0xe0, 
    0x09, 0xef, 0xe6, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x06, 0x0b, 0x10, 0x9e, 0xfe, 0x60, 
    0x03, 0xb0, 0x78, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0xc5, 0x0c, 0x0a, 0x10, 0x3b, 0x07, 0x80, 
    0x03, 0x1b, 0x18, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x31, 0xb9, 0x80, 
    0x00, 0xff, 0xc0, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x0f, 0xfc, 0x00, 
    0x00, 0xec, 0xe0, 0x0e, 0x1b, 0x63, 0x61, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x0e, 0xde, 0x00, 
    0x00, 0x16, 0x00, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x01, 0x60, 0x00, 
    0x00, 0x3b, 0x00, 0x07, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x03, 0xb0, 0x00, 
    0x00, 0x11, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x03, 0x38, 0x00, 
    0x00, 0x05, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x58, 0x00, 
    0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0xc0, 0x00, 
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char sem_internet[] PROGMEM = 
  {
    // 'Wifi Sem Internet', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x3e, 0x30, 0x04, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x63, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0x07, 0x9b, 0xb0, 0x60, 0x33, 0xde, 0x79, 0xb3, 0x1e, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x0f, 0x0c, 0x99, 0xd8, 0x78, 0x36, 0x6c, 0xcd, 0xdd, 0xa3, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xcc, 0xd9, 0x98, 0x3e, 0x37, 0x0c, 0xcd, 0x99, 0x8f, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xef, 0xd9, 0x98, 0x0f, 0x33, 0xcc, 0xfd, 0x99, 0x9b, 0x04, 0x40, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x6c, 0x19, 0x98, 0x03, 0x30, 0xec, 0xc1, 0x99, 0xb3, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x0c, 0x6c, 0xd9, 0x98, 0x63, 0x36, 0x6c, 0xcd, 0x99, 0xb3, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xc7, 0x99, 0x98, 0x3e, 0x33, 0xc6, 0x79, 0x99, 0x9f, 0x0c, 0xc0, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x1e, 0x0f, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0xb6, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xb6, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xb6, 0x0f, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xf6, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe6, 0xec, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe6, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe6, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0xc0, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0xc0, 0x00, 0x00, 0xc0, 0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0x0f, 0x37, 0x60, 0xcd, 0xbc, 0xf3, 0xdb, 0x1e, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1e, 0x09, 0xb3, 0xb0, 0xcc, 0xd8, 0x9b, 0x1d, 0xb3, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0x99, 0xb3, 0x30, 0xcc, 0xd9, 0x9b, 0x19, 0xb3, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x03, 0xdf, 0xb3, 0x30, 0xcc, 0xd9, 0xfb, 0x19, 0xbf, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xd8, 0x33, 0x30, 0xcc, 0xd9, 0x83, 0x19, 0xb0, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0xd9, 0xb3, 0x30, 0xcc, 0xd9, 0x9b, 0x19, 0xb3, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0x8f, 0x33, 0x30, 0xcc, 0xcc, 0xf3, 0x19, 0x8e, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 
    0x00, 0x3f, 0xe0, 0x0f, 0xf9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xfd, 0x80, 
    0x01, 0xff, 0xe8, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x7c, 0x03, 0x60, 
    0x07, 0xc0, 0x36, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0xf3, 0xff, 0x70, 
    0x0f, 0x3f, 0xff, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0xcf, 0xff, 0x30, 
    0x0c, 0xff, 0xfb, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x06, 0x0b, 0x10, 0x3e, 0x03, 0x00, 
    0x01, 0xe0, 0x3c, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0xc5, 0x0c, 0x0a, 0x10, 0x39, 0xfb, 0x40, 
    0x01, 0x9f, 0xb4, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x07, 0xff, 0x00, 
    0x00, 0x7f, 0xf8, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x07, 0x0f, 0x00, 
    0x00, 0x78, 0xf8, 0x0e, 0x1b, 0x63, 0x61, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x00, 0xf3, 0x00, 
    0x00, 0x07, 0x30, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x01, 0xfb, 0x00, 
    0x00, 0x1f, 0xb0, 0x07, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x01, 0x98, 0x00, 
    0x00, 0x1d, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x63, 0x00, 
    0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x61, 0x00, 
    0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char sinal_forte[] PROGMEM = // Adicione os bytes da imagem de sinal forte aqui
  {
    // 'SinalForte', 128x64px
    // 'SinalForte', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0f, 0xc0, 
    0x01, 0xe0, 0x00, 0x30, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xf8, 0xe0, 
    0x03, 0x30, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xff, 0x70, 
    0x06, 0x19, 0xb0, 0x30, 0x36, 0xc3, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x62, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xfb, 0xc0, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xfe, 0x80, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x67, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 
    0x06, 0x19, 0x9b, 0xb0, 0x36, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xf6, 0x00, 
    0x03, 0x31, 0x98, 0x30, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 
    0x01, 0xe1, 0x98, 0x3f, 0x36, 0x63, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0x78, 0xd8, 0xf1, 0xef, 0x3c, 0x6c, 0xf0, 0x1e, 0x3c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcc, 0x93, 0x36, 0x46, 0xdd, 0x90, 0x23, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0x9b, 0x06, 0x1e, 0xcd, 0x98, 0x0f, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0xfb, 0x06, 0x36, 0xcd, 0x98, 0x1b, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0x83, 0x06, 0x66, 0xcd, 0x98, 0x33, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xcc, 0x48, 0xcd, 0x9b, 0x36, 0x66, 0xcd, 0x90, 0x33, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0x78, 0xcc, 0xf1, 0xe3, 0x3e, 0x6c, 0xf0, 0x1f, 0x3c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x67, 0xbc, 0xf3, 0x76, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x6c, 0xd8, 0x9b, 0x3b, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x6e, 0x19, 0x9b, 0x33, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x67, 0x99, 0xfb, 0x33, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x61, 0xd9, 0x83, 0x33, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0xd9, 0x9b, 0x33, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x67, 0x8c, 0xf3, 0x33, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 
    0x01, 0xff, 0xf8, 0x0f, 0xf1, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x80, 
    0x07, 0xf1, 0xfe, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x7f, 0x8f, 0xe0, 
    0x0f, 0x3f, 0xcf, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0xf3, 0xfc, 0xf0, 
    0x0e, 0xff, 0xf7, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0xef, 0xff, 0x70, 
    0x01, 0xfb, 0xf8, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x06, 0x0b, 0x10, 0x1f, 0xdf, 0x80, 
    0x03, 0xdf, 0xbc, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0xc5, 0x0c, 0x0a, 0x10, 0x3d, 0xfb, 0xc0, 
    0x01, 0x7f, 0xe8, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x17, 0xfe, 0x80, 
    0x00, 0xff, 0xf0, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x0f, 0xff, 0x00, 
    0x00, 0x6f, 0x60, 0x0e, 0x1b, 0x63, 0x61, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x06, 0xf6, 0x00, 
    0x00, 0x1f, 0x80, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x01, 0xf8, 0x00, 
    0x00, 0x1f, 0x80, 0x07, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x01, 0xf8, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x60, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char sinal_fraco[] PROGMEM = // Adicione os bytes da imagem de sinal fraco aqui
  { 
    
    // 'SinalFraco', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0xe0, 0x00, 0x30, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x30, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x06, 0x19, 0xb0, 0x30, 0x36, 0xc3, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x62, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x67, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x00, 
    0x06, 0x19, 0x9b, 0xb0, 0x36, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 
    0x03, 0x31, 0x98, 0x30, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 
    0x01, 0xe1, 0x98, 0x3f, 0x36, 0x63, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0x78, 0xd8, 0xf1, 0xef, 0x3c, 0x6c, 0xf0, 0x1e, 0x3c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcc, 0x93, 0x36, 0x46, 0xdd, 0x90, 0x23, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0x9b, 0x06, 0x1e, 0xcd, 0x98, 0x0f, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0xfb, 0x06, 0x36, 0xcd, 0x98, 0x1b, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0x83, 0x06, 0x66, 0xcd, 0x98, 0x33, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xcc, 0x48, 0xcd, 0x9b, 0x36, 0x66, 0xcd, 0x90, 0x33, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0x78, 0xcc, 0xf1, 0xe3, 0x3e, 0x6c, 0xf0, 0x1f, 0x3c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x67, 0xbc, 0xf3, 0x76, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x6c, 0xd8, 0x9b, 0x3b, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x6e, 0x19, 0x9b, 0x33, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x67, 0x99, 0xfb, 0x33, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x61, 0xd9, 0x83, 0x33, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0xd9, 0x9b, 0x33, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x67, 0x8c, 0xf3, 0x33, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 
    0x01, 0xff, 0xf8, 0x0f, 0xf1, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x80, 
    0x07, 0xf1, 0xfe, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x7f, 0x8f, 0xe0, 
    0x0f, 0x3f, 0xcf, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0xf3, 0xfc, 0xf0, 
    0x0e, 0xff, 0xf7, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0xef, 0xff, 0x70, 
    0x01, 0xfb, 0xf8, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x06, 0x0b, 0x10, 0x1f, 0xdf, 0x80, 
    0x03, 0xdf, 0xbc, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0xc5, 0x0c, 0x0a, 0x10, 0x3d, 0xfb, 0xc0, 
    0x01, 0x7f, 0xe8, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x17, 0xfe, 0x80, 
    0x00, 0xff, 0xf0, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x0f, 0xff, 0x00, 
    0x00, 0x6f, 0x60, 0x0e, 0x1b, 0x63, 0x61, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x06, 0xf6, 0x00, 
    0x00, 0x1f, 0x80, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x01, 0xf8, 0x00, 
    0x00, 0x1f, 0x80, 0x07, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x01, 0xf8, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x60, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char sinal_ruim[] PROGMEM = // Adicione os bytes da imagem de sinal ruim aqui
  { 
    
      // 'SinalRuim', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x01, 0xe0, 0x00, 0x30, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x03, 0x30, 0x00, 0x30, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x06, 0x19, 0xb0, 0x30, 0x36, 0xc3, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x62, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x06, 0x19, 0x98, 0x30, 0x36, 0x67, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x06, 0x19, 0x9b, 0xb0, 0x36, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x00, 
    0x03, 0x31, 0x98, 0x30, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfb, 0x00, 
    0x01, 0xe1, 0x98, 0x3f, 0x36, 0x63, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf2, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0x78, 0xd8, 0xf1, 0xef, 0x3c, 0x6c, 0xf0, 0x1e, 0x3c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcc, 0x93, 0x36, 0x46, 0xdd, 0x90, 0x23, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0x9b, 0x06, 0x1e, 0xcd, 0x98, 0x0f, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0xfb, 0x06, 0x36, 0xcd, 0x98, 0x1b, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0xcc, 0xcd, 0x83, 0x06, 0x66, 0xcd, 0x98, 0x33, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xcc, 0x48, 0xcd, 0x9b, 0x36, 0x66, 0xcd, 0x90, 0x33, 0x66, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0x78, 0xcc, 0xf1, 0xe3, 0x3e, 0x6c, 0xf0, 0x1f, 0x3c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x67, 0xbc, 0xf3, 0x76, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x6c, 0xd8, 0x9b, 0x3b, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x6e, 0x19, 0x9b, 0x33, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x67, 0x99, 0xfb, 0x33, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x61, 0xd9, 0x83, 0x33, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0xd9, 0x9b, 0x33, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x67, 0x8c, 0xf3, 0x33, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 
    0x01, 0xff, 0xf8, 0x0f, 0xf1, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x80, 
    0x07, 0xf1, 0xfe, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x7f, 0x8f, 0xe0, 
    0x0f, 0x3f, 0xcf, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0xf3, 0xfc, 0xf0, 
    0x0e, 0xff, 0xf7, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0xef, 0xff, 0x70, 
    0x01, 0xfb, 0xf8, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x06, 0x0b, 0x10, 0x1f, 0xdf, 0x80, 
    0x03, 0xdf, 0xbc, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0xc5, 0x0c, 0x0a, 0x10, 0x3d, 0xfb, 0xc0, 
    0x01, 0x7f, 0xe8, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x17, 0xfe, 0x80, 
    0x00, 0xff, 0xf0, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x0f, 0xff, 0x00, 
    0x00, 0x6f, 0x60, 0x0e, 0x1b, 0x63, 0x61, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x06, 0xf6, 0x00, 
    0x00, 0x1f, 0x80, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x01, 0xf8, 0x00, 
    0x00, 0x1f, 0x80, 0x07, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x01, 0xf8, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x60, 0x00, 
    0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x60, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char conectado_wifi[] PROGMEM = // Adicione os bytes da imagem de conectado wifi
  { 
    // 'Conectado ao Wifi', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0xe0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x63, 0x8e, 0x07, 0xc6, 0x00, 
    0x03, 0x30, 0x00, 0x00, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x63, 0x8c, 0x06, 0x06, 0x00, 
    0x06, 0x01, 0xe6, 0xc3, 0xc7, 0xbc, 0xf1, 0xb3, 0xc0, 0x78, 0xf0, 0x37, 0x9e, 0x06, 0x06, 0x00, 
    0x06, 0x01, 0x27, 0x62, 0x4c, 0xd9, 0x1b, 0x76, 0x40, 0x8d, 0x90, 0x37, 0xde, 0x06, 0x06, 0x00, 
    0x06, 0x03, 0x36, 0x66, 0x6c, 0x18, 0x7b, 0x36, 0x60, 0x3d, 0x98, 0x36, 0xde, 0x07, 0xc6, 0x00, 
    0x06, 0x03, 0x36, 0x67, 0xec, 0x18, 0xdb, 0x36, 0x60, 0x6d, 0x98, 0x3e, 0xfe, 0x06, 0x06, 0x00, 
    0x06, 0x03, 0x36, 0x66, 0x0c, 0x19, 0x9b, 0x36, 0x60, 0xcd, 0x98, 0x1c, 0x7e, 0x76, 0x06, 0x00, 
    0x03, 0x33, 0x36, 0x66, 0x64, 0xd9, 0x9b, 0x32, 0x40, 0xcc, 0x90, 0x1c, 0x76, 0x06, 0x06, 0x00, 
    0x01, 0xe1, 0xe6, 0x63, 0xc7, 0x8c, 0xf9, 0xb3, 0xc0, 0x7c, 0xf0, 0x1c, 0x76, 0x06, 0x06, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x3f, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x63, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x1b, 0x1b, 0x1e, 0xf3, 0xc7, 0x8f, 0x03, 0x63, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x19, 0xb7, 0x12, 0xc6, 0x4c, 0xd9, 0x03, 0x63, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x3f, 0x19, 0xb3, 0x33, 0xc6, 0x6c, 0x19, 0x83, 0x63, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x19, 0xb3, 0x3f, 0xc7, 0xec, 0x19, 0x83, 0x7e, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x19, 0xb3, 0x30, 0xc6, 0x0c, 0x19, 0x83, 0x60, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x30, 0x19, 0xb7, 0x33, 0xc6, 0x6c, 0xc9, 0x03, 0x60, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x3f, 0x19, 0x9b, 0x1e, 0xc3, 0xc7, 0x8f, 0x03, 0x60, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x07, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40, 0x00, 0x10, 0x00, 
    0x07, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x30, 0x00, 
    0x0f, 0x86, 0xd9, 0x8f, 0x3d, 0xb1, 0xe0, 0xcc, 0xd9, 0x83, 0x6c, 0x3d, 0xe7, 0x9b, 0x79, 0xe0, 
    0x0d, 0x8d, 0xd9, 0x91, 0xb3, 0x73, 0x30, 0xcc, 0xce, 0xc3, 0x66, 0x66, 0xc8, 0xdd, 0xb1, 0x30, 
    0x0d, 0x8c, 0xd9, 0x87, 0xb3, 0x33, 0x30, 0xcc, 0xcc, 0xc3, 0x66, 0x70, 0xc3, 0xd9, 0xb3, 0x30, 
    0x0d, 0x8c, 0xd9, 0x8d, 0xb3, 0x33, 0xf0, 0xcc, 0xcc, 0xc3, 0x66, 0x3c, 0xc6, 0xd9, 0xb3, 0xf0, 
    0x1f, 0xcc, 0xd9, 0x99, 0xb3, 0x33, 0x00, 0xcc, 0xcc, 0xc3, 0x66, 0x0e, 0xcc, 0xd9, 0xb3, 0x00, 
    0x18, 0xcd, 0xd9, 0x99, 0xb3, 0x73, 0x30, 0xdc, 0xcc, 0xc3, 0x66, 0x66, 0xcc, 0xd9, 0xb3, 0x30, 
    0x18, 0xc6, 0xcd, 0x8f, 0xb1, 0xb1, 0xe0, 0x6c, 0xcc, 0xc3, 0x66, 0x3c, 0x67, 0xd9, 0x99, 0xe0, 
    0x00, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char acesse_wifi[] PROGMEM = // Adicione os bytes da imagem de Acesse o Wifi
  { 
    // 'Acesse o Wifi', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x70, 0x3e, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x60, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xe1, 0xe3, 0xc7, 0x9e, 0x3c, 0x07, 0x81, 0xbe, 0xf0, 0x30, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x63, 0x32, 0x4c, 0xf3, 0x64, 0x0c, 0x81, 0xbe, 0xf0, 0x30, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x63, 0x06, 0x6e, 0x38, 0x66, 0x0c, 0xc1, 0xb6, 0xf0, 0x3e, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x63, 0x07, 0xe7, 0x9e, 0x7e, 0x0c, 0xc1, 0xf7, 0xf0, 0x30, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xf3, 0x06, 0x01, 0xc7, 0x60, 0x0c, 0xc0, 0xe3, 0xf3, 0xb0, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x06, 0x31, 0x36, 0x6c, 0xf3, 0x66, 0x0c, 0x80, 0xe3, 0xb0, 0x30, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x06, 0x31, 0xe3, 0xc7, 0x9e, 0x3c, 0x07, 0x80, 0xe3, 0xb0, 0x30, 0x60, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xf9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x06, 0x0b, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0x45, 0x0c, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x61, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0xe0, 0x00, 0x0c, 0x00, 0x00, 0x06, 0x3c, 0x78, 0x33, 0xe3, 0x9f, 0x9e, 0x3c, 0x78, 0x00, 
    0x06, 0x30, 0x00, 0x0c, 0x00, 0x00, 0x0e, 0x66, 0xcc, 0x73, 0x04, 0xc1, 0xb3, 0x66, 0xcc, 0x00, 
    0x06, 0x01, 0xe6, 0xcd, 0x87, 0xb0, 0x1e, 0x06, 0x0c, 0x72, 0x0c, 0x03, 0x33, 0x66, 0xcc, 0x00, 
    0x07, 0x83, 0x27, 0x6e, 0xc8, 0xf0, 0x16, 0x06, 0x38, 0xb7, 0xcf, 0x82, 0x33, 0x66, 0xcc, 0x00, 
    0x03, 0xe3, 0x36, 0x6c, 0xc3, 0xc0, 0x06, 0x0c, 0x0c, 0xb6, 0x6c, 0xc6, 0x1e, 0x66, 0xcc, 0x00, 
    0x00, 0xf3, 0xf6, 0x6c, 0xc6, 0xc0, 0x06, 0x18, 0x0d, 0x30, 0x6c, 0xc6, 0x33, 0x3e, 0xcc, 0x00, 
    0x00, 0x33, 0x06, 0x6c, 0xcc, 0xc0, 0x06, 0x30, 0x0d, 0xf8, 0x6c, 0xcc, 0x33, 0x06, 0xcc, 0x00, 
    0x06, 0x33, 0x36, 0x6c, 0xcc, 0xf0, 0x06, 0x60, 0xcc, 0x36, 0x6c, 0xcc, 0x33, 0x64, 0xcc, 0x00, 
    0x03, 0xe1, 0xe6, 0x6c, 0xc7, 0xf0, 0x06, 0x7e, 0x78, 0x33, 0xc7, 0x8c, 0x1e, 0x38, 0x78, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x00, 
    0x7c, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00, 0x05, 0x80, 0x18, 
    0x60, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
    0x60, 0x3c, 0x78, 0xf0, 0x3c, 0x18, 0x07, 0x8d, 0x9e, 0xcd, 0xb3, 0x3d, 0xe3, 0xc7, 0x8f, 0x18, 
    0x60, 0x46, 0xcd, 0x18, 0x46, 0x18, 0x04, 0x8c, 0xcc, 0xdb, 0xb3, 0x32, 0x36, 0x68, 0xd9, 0x18, 
    0x7c, 0x0e, 0xc0, 0x78, 0x0e, 0x18, 0x0c, 0xcc, 0xcc, 0xd9, 0xb3, 0x30, 0xf6, 0x03, 0xd9, 0x98, 
    0x60, 0x36, 0xc0, 0xd8, 0x36, 0x18, 0x0c, 0xcc, 0xcc, 0xd9, 0xb3, 0x31, 0xb6, 0x06, 0xd9, 0x98, 
    0x60, 0x66, 0xc1, 0x98, 0x66, 0x18, 0x0c, 0xcc, 0xcc, 0xd9, 0xb3, 0x33, 0x36, 0x0c, 0xd9, 0x80, 
    0x60, 0x66, 0xcd, 0x98, 0x66, 0x0c, 0xc4, 0xcc, 0xcc, 0xdb, 0xb3, 0x33, 0x36, 0x6c, 0xd9, 0x18, 
    0x60, 0x3e, 0x78, 0xf8, 0x3e, 0x07, 0x87, 0x8c, 0xcc, 0xcd, 0x9b, 0x31, 0xf3, 0xc7, 0xcf, 0x18, 
    0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char envio_especie[] PROGMEM = // Adicione os bytes da imagem de Valor Recebido no Servidor
  { 
    // 'Valor Recebido no servidor', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xc1, 0x80, 0xc0, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xc1, 0x80, 0xc0, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x63, 0x00, 0xc0, 0x00, 0x0c, 0x60, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x63, 0x3c, 0xc7, 0x8f, 0x0c, 0x61, 0xe3, 0xc7, 0x9b, 0x18, 0xd9, 0xe0, 0x36, 0x1e, 0x00, 
    0x00, 0x63, 0x46, 0xc4, 0xcc, 0x0c, 0x63, 0x36, 0x6c, 0xdd, 0x99, 0xbb, 0x30, 0x33, 0x32, 0x00, 
    0x00, 0x36, 0x1e, 0xcc, 0xcc, 0x0f, 0xc3, 0x36, 0x0c, 0xd9, 0x99, 0x9b, 0x30, 0x33, 0x33, 0x00, 
    0x00, 0x36, 0x36, 0xcc, 0xcc, 0x0c, 0xc3, 0xf6, 0x0f, 0xd9, 0x99, 0x9b, 0x30, 0x33, 0x33, 0x00, 
    0x00, 0x3e, 0x66, 0xcc, 0xcc, 0x0c, 0x63, 0x06, 0x0c, 0x19, 0x99, 0x9b, 0x30, 0x33, 0x33, 0x00, 
    0x00, 0x1c, 0x66, 0xc4, 0xcc, 0x0c, 0x63, 0x36, 0x6c, 0xdd, 0x99, 0xb9, 0x30, 0x33, 0x13, 0x00, 
    0x00, 0x1c, 0x3e, 0xc7, 0x8c, 0x0c, 0x71, 0xe3, 0xc7, 0x9b, 0x18, 0xd9, 0xe0, 0x33, 0x1e, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0xc1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xcf, 0xc6, 0xcd, 0x8f, 0x3d, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x6c, 0xc6, 0xdb, 0x89, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xe6, 0x6c, 0x6c, 0xd9, 0x99, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xec, 0x6c, 0xd9, 0x99, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x0c, 0x78, 0xd9, 0x99, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x06, 0x36, 0x6c, 0x38, 0xdb, 0x99, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xe3, 0xcc, 0x38, 0xcd, 0x8f, 0x31, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x28, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x2a, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x1c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xf9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x04, 0x0b, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0x45, 0x0c, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x63, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char envio_estoque[] PROGMEM = // Adicione os bytes da imagem de Valor Estoque no Servidor
  { 
      // 'Estoque recebido', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 
    0x00, 0x60, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 
    0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 
    0x00, 0x60, 0x3c, 0xf3, 0xc3, 0x66, 0x63, 0xc0, 0xc6, 0x3c, 0x78, 0xf3, 0x63, 0x1b, 0x1e, 0x00, 
    0x00, 0x7e, 0x66, 0x62, 0x46, 0xe6, 0x66, 0x60, 0xc6, 0x64, 0xcd, 0x93, 0xb3, 0x37, 0x32, 0x00, 
    0x00, 0x60, 0x70, 0x66, 0x66, 0x66, 0x66, 0x60, 0xfc, 0x66, 0xc1, 0x9b, 0x33, 0x33, 0x33, 0x00, 
    0x00, 0x60, 0x3c, 0x66, 0x66, 0x66, 0x67, 0xe0, 0xcc, 0x7e, 0xc1, 0xfb, 0x33, 0x33, 0x33, 0x00, 
    0x00, 0x60, 0x0e, 0x66, 0x66, 0x66, 0x66, 0x00, 0xc6, 0x60, 0xc1, 0x83, 0x33, 0x33, 0x33, 0x00, 
    0x00, 0x60, 0x66, 0x62, 0x46, 0xe6, 0xe6, 0x60, 0xc6, 0x66, 0xcd, 0x9b, 0xb3, 0x33, 0x13, 0x00, 
    0x00, 0x7e, 0x3c, 0x33, 0xc3, 0x63, 0x63, 0xc0, 0xc7, 0x3c, 0x78, 0xf3, 0x63, 0x1b, 0x1e, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0xc0, 0x00, 0xf8, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1c, 0xc0, 0x01, 0x8c, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1c, 0xc7, 0x81, 0x80, 0xf3, 0xf1, 0xb3, 0x63, 0xcf, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1e, 0xc4, 0xc1, 0xe0, 0x93, 0x31, 0xb6, 0xe6, 0x6c, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1a, 0xcc, 0xc0, 0xf9, 0x9b, 0x1b, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1b, 0xcc, 0xc0, 0x3d, 0xfb, 0x1b, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x19, 0xcc, 0xc0, 0x0d, 0x83, 0x1e, 0x36, 0x66, 0x6c, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x19, 0xc4, 0xc1, 0x8d, 0x9b, 0x0e, 0x36, 0x66, 0x4c, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0xc7, 0x80, 0xf8, 0xf3, 0x0e, 0x33, 0x63, 0xcc, 0x60, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xf9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x04, 0x0b, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0x45, 0x0c, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x63, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  const unsigned char pix_cartao[] PROGMEM = // Adicione os bytes da imagem de Valor Estoque no Servidor
  { 
    // 'Pix Cartao', 128x64px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x30, 0x60, 0x30, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x30, 0x60, 0x30, 0x00, 0x03, 0x18, 0x00, 0x00, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x18, 0xc0, 0x30, 0x00, 0x03, 0x18, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x18, 0xcf, 0x31, 0xe3, 0xc3, 0x18, 0x78, 0xf1, 0xe6, 0xc6, 0x36, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x18, 0xd1, 0xb1, 0x23, 0x03, 0x18, 0xcd, 0x9b, 0x37, 0x66, 0x6e, 0xcc, 0x00, 0x00, 
    0x00, 0x00, 0x0d, 0x87, 0xb3, 0x33, 0x03, 0xf0, 0xcd, 0x83, 0x36, 0x66, 0x66, 0xcc, 0x00, 0x00, 
    0x00, 0x00, 0x0d, 0x8d, 0xb3, 0x33, 0x03, 0x30, 0xfd, 0x83, 0xf6, 0x66, 0x66, 0xcc, 0x00, 0x00, 
    0x00, 0x00, 0x0f, 0x99, 0xb3, 0x33, 0x03, 0x18, 0xc1, 0x83, 0x06, 0x66, 0x66, 0xcc, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0x19, 0xb1, 0x23, 0x03, 0x18, 0xcd, 0x9b, 0x37, 0x66, 0x6e, 0x48, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0x0d, 0xb1, 0xe3, 0x03, 0x0c, 0x78, 0xf1, 0xe6, 0xc6, 0x36, 0x78, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0xf9, 0x80, 0x11, 0xe0, 0x00, 0x22, 0xc0, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x20, 0x06, 0x00, 
    0x01, 0x8c, 0x00, 0x13, 0x30, 0x00, 0x60, 0x00, 0x01, 0x8c, 0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 
    0x01, 0x8d, 0xb3, 0x26, 0x01, 0xef, 0xf3, 0xc7, 0x81, 0x8c, 0x79, 0xbb, 0x1e, 0xf1, 0xe6, 0x00, 
    0x01, 0x8d, 0x92, 0x26, 0x02, 0x3c, 0x64, 0x6c, 0xc1, 0x8c, 0xcd, 0xdd, 0xb2, 0x63, 0x26, 0x00, 
    0x01, 0x8d, 0x9e, 0x26, 0x00, 0xfc, 0x61, 0xec, 0xc1, 0xf8, 0xcd, 0x99, 0xb3, 0x63, 0x36, 0x00, 
    0x01, 0xf9, 0x8e, 0x26, 0x01, 0xbc, 0x63, 0x6c, 0xc1, 0x98, 0xfd, 0x99, 0xb3, 0x63, 0x32, 0x00, 
    0x01, 0x81, 0x9e, 0x26, 0x03, 0x3c, 0x66, 0x6c, 0xc1, 0x8c, 0xc1, 0x99, 0xb3, 0x63, 0x30, 0x00, 
    0x01, 0x81, 0xb3, 0x43, 0x33, 0x3c, 0x66, 0x6c, 0xc1, 0x8c, 0xcd, 0x99, 0xb3, 0x61, 0x26, 0x00, 
    0x01, 0x81, 0xb3, 0x41, 0xe1, 0xfc, 0x33, 0xe7, 0x81, 0x86, 0x79, 0x99, 0x9e, 0x31, 0xe6, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x28, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x38, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x2a, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x1c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xf9, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x00, 0x00, 0x61, 0x00, 0x01, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x00, 0x00, 0x40, 0x80, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x1b, 0x61, 0x3f, 0x40, 0xbc, 0x85, 0x02, 0xf1, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x73, 0x41, 0x82, 0x85, 0x04, 0x0b, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x63, 0x61, 0x43, 0x02, 0x45, 0x0c, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x7f, 0x5e, 0x3e, 0x49, 0x78, 0xfa, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0c, 0x0b, 0x63, 0x60, 0x40, 0x42, 0x49, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0e, 0x1b, 0x63, 0x63, 0x40, 0x42, 0x29, 0x01, 0x0a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xfb, 0x7f, 0x7f, 0x40, 0x42, 0x31, 0x01, 0x1a, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xf2, 0x3e, 0x3e, 0x40, 0x3e, 0x31, 0x00, 0xf9, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

//  Final   Variaveis de Imagem -------------------------------------------------------------------

WiFiClient client; // Usado para tentar a conexão com o Google
unsigned long lastReconnectAttempt = 0;
const unsigned long reconnectInterval = 30000; // Intervalo de reconexão em milissegundos
unsigned long lastStatusCheck = 0;
const unsigned long statusCheckInterval = 10000; // Intervalo de verificação do status em milissegundos
// Variáveis para controle de tempo
unsigned long lastMessageTime = 0;
const unsigned long intervalMessage = 30000;  // Intervalo de 30 segundos

// Converta as variáveis para String
String creditoStr = String(credito);
String decrementoStr = String(decremento);

int payloadAtual = -1;  // Variável global para armazenar o payload atual
int estadoAnterior = -1;  // Variável global para armazenar o estado anterior dos pinos
int webpayload = 0;
int estadoJoystick = digitalRead(joystick);
int estadoTela = digitalRead(tela);

// NÃO MEXER DAQUI PRA CIMA, FUNCIONANDO TUDO
//  Começo do Codigo




void setup() // ok
{   //  Inicio VOID Setup ---------------------------------------------------------------------------
  Serial.begin(115200); 

  
  

  // Inicializa o display OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
  {
    Serial.println(F("Falha ao inicializar o display OLED"));
    for (;;);  // Para o código em caso de falha
  }
   
  pinMode(rele, OUTPUT);  
  pinMode(especie, INPUT_PULLUP); 
  pinMode(decrementar, INPUT_PULLUP); 
  
  pinMode(led_B, OUTPUT);
  pinMode(led_G, OUTPUT);
  pinMode(led_R, OUTPUT);

  pinMode(resetWifi, INPUT_PULLUP);

  pinMode(centro, OUTPUT);
  pinMode(direita, OUTPUT);
  pinMode(esquerda, OUTPUT);
  pinMode(cima, OUTPUT);
  pinMode(baixo, OUTPUT);
  pinMode(joystick, OUTPUT);
  pinMode(tela, OUTPUT);
  pinMode(configura, OUTPUT);


  digitalWrite(rele, LOW);  //INICIA RELE DESLIGADO 
  digitalWrite(centro, LOW);
  digitalWrite(direita, LOW);
  digitalWrite(esquerda, LOW);
  digitalWrite(cima, LOW);
  digitalWrite(baixo, LOW);
  digitalWrite(joystick, LOW);
  digitalWrite(tela, LOW);
  digitalWrite(configura, LOW);

  
  // Anexa o pino do botão ao objeto Bounce
  debouncer_especie.attach(especie);
  debouncer_decrementar.attach(decrementar);

  // Configura o intervalo de debounce (tempo em milissegundos)
  debouncer_especie.interval(30);    // intervalo de debounce de  30ms 
  debouncer_decrementar.interval(30); // intervalo de debounce de 30ms 

  // Inicializa a EEPROM
  EEPROM.begin(EEPROM_SIZE);


  //Verifica se tem crédito na EEPROM ou salva 0 se a memória estiver vazia.
  EEPROM.get(EEPROM_ADDR_CREDITO, credito);  
  if(credito >= 65535 || credito < 0)
  {
    EEPROM.put(EEPROM_ADDR_CREDITO, 0);
    EEPROM.commit();
    credito = 0;
  }
  Serial.print("Credito EEPROM: "); 
  Serial.println(credito); 


  //Verifica se tem decremento na EEPROM ou salva 0 se a memória estiver vazia.
  EEPROM.get(EEPROM_ADDR_DECREMENTO, decremento);  
  if(decremento >= 65535 || decremento < 0)
  {
    EEPROM.put(EEPROM_ADDR_DECREMENTO, 0);
    EEPROM.commit();
    decremento = 0;
  }
  Serial.print("Decremento EEPROM: "); 
  Serial.println(decremento); 

  setupWiFi();
  IniciaWebSocket();  

  //-----------------------------------------------------------------------// 
  // Setup Whatchdog
  // Inicializa o WDT
  // esp_task_wdt_config_t wdt_config = {
  //   .timeout_ms = 20000,    // Tempo limite em milissegundos
  //   .idle_core_mask = 0,    // Não monitorar os núcleos
  //   .trigger_panic = true   // Gatilho de pânico quando o tempo limite ocorre
  // };
  // esp_task_wdt_init(&wdt_config);
  // esp_task_wdt_add(NULL);
  //-----------------------------------------------------------------------//
 
  //INICIA FUNÇÃO TAREFAS:
  // TAREFA 1
  xTaskCreatePinnedToCore(Task1code, "Task1", 10000, NULL, 1, &Task1, 0);                            
  delay(500); 

  // TAREFA 2
  xTaskCreatePinnedToCore(Task2code, "Task2", 10000, NULL, 1, &Task2, 1);          
  delay(500);  
}   //  Final VOID Setup  ---------------------------------------------------------------------------

void StatusWifi()  // ok
{   //  Inicio VOID Status Wifi ------------------------------------------------------------------------------
  if(fimCredito > 0 || fimDecremento > 0)
  {
    return;
  }
  else if(tempo_LCD > 0)
  {
    return;
  }
  else if(WiFi.status() != WL_CONNECTED) // SEM WIFI
  {
   // Serial.println("SEM WIFI");

   
        digitalWrite(led_R, HIGH);
        digitalWrite(led_G, LOW);        
        digitalWrite(led_B, LOW);
    

    // Limpa o buffer do display
    display.clearDisplay();

    // Desenha a imagem no display OLED
    display.drawBitmap(0, 0, sem_wifi, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);

    // Exibe o conteúdo do buffer no display
    display.display();    
  }
  
  else if (WiFi.status() == WL_CONNECTED) // COM INTERNET E WIFI
  {
    //Serial.println("CONECTADO AO WIFI.");

    // Verificar se há conexão com a internet tentando conectar ao servidor Google na porta 80
    if (client.connect("www.google.com", 80)) 
    {
      // Conseguiu abrir conexão, está com internet
      //Serial.println("COM INTERNET E COM WIFI.");
      // Verifica o status do WebSocket e tenta reconectar, se necessário
      if (!webSocket.isConnected()) {
                unsigned long now = millis();
                if (now - lastReconnectAttempt >= reconnectInterval) {
                    Serial.println("Tentando reconectar o WebSocket...");
                    lastReconnectAttempt = now;
                    // Tenta iniciar uma nova conexão
                    webSocket.disconnect(); // Desconectar antes de tentar reconectar
                    delay(1000); // Atraso para permitir a desconexão
                    //webSocket.beginSSL("www.bluepaypag.com", 443, urlWebSocket.c_str());
                    //webSocket.onEvent(webSocketEvent);
                    IniciaWebSocket();
                }
            } else {
                lastReconnectAttempt = millis(); // Se conectado, redefina o tempo de tentativa de reconexão
            }

      
        digitalWrite(led_G, HIGH);
        digitalWrite(led_R, LOW);
        digitalWrite(led_B, LOW);
      

        // Limpa o buffer do display
        display.clearDisplay();
        int32_t rssi = WiFi.RSSI(); // Obter o RSSI para mostrar a intensidade do sinal  

        // Selecione e desenhe a imagem com base na intensidade do sinal
        if (rssi > -50) {
          display.drawBitmap(0, 0, sinal_forte, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
        } 
        else if (rssi > -70) {
          display.drawBitmap(0, 0, sinal_fraco, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
        } 
        else {
          display.drawBitmap(0, 0, sinal_ruim, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
        }
        display.display(); // Exiba o conteúdo do buffer no display

        client.stop(); // Encerra a conexão após a verificação
      
    } 
    else 
    {
      // Não conseguiu abrir a conexão, está com Wi-Fi, mas sem internet
      //Serial.println("COM WIFI, MAS SEM INTERNET.");
      webSocket.disconnect();
        digitalWrite(led_G, LOW);
        digitalWrite(led_R, LOW);
        digitalWrite(led_B, HIGH);

      // Limpa o buffer do display e mostra mensagem de "Sem Internet"
      display.clearDisplay();
      display.drawBitmap(0, 0, sem_internet, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
      display.display();

      //esp_task_wdt_reset();  
    }
  }

}   //  Final VOID Status Wifi --------------------------------------------------------------------------------

void IniciaWebSocket()
{
  // Inicializar a conexão WebSocket
  String site = "/cable?telemetria_id=";  // Inicialize a string normalmente
  site += String(idMaquina);  // Concatene a variável String com o restante da URL
  
  webSocket.beginSSL("www.bluepaypag.com", 443, site.c_str()); // Use a URL dinâmica
  //webSocket.beginSSL("www.bluepaypag.com", 443, "/cable?telemetria_id="+IdMaquina)); // Substitua pelo seu servidor WSS
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000); // Tentar reconectar a cada 5 segundos

  // FUNCIONAL urlWebSocket = site;
}

WiFiManager wm;
void setupWiFi() //ok
{   //  Inicio  VOID  CONEXÃO WI-FI --------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------//
  // Recupera o tempo de pulso da EEPROM
  EEPROM.get(EEPROM_ADDR_TEMPO_PULSO, tempoPulso);
  if(tempoPulso >= 65535 || tempoPulso < 0)
  {
    tempoPulso = 100;
    EEPROM.put(EEPROM_ADDR_TEMPO_PULSO, tempoPulso);
    EEPROM.commit();
  }

  // Verifica se o ID da máquina está vazio
  if (EEPROM.read(EEPROM_ADDR_ID_MAQUINA) == 255)
  {
    strcpy(idMaquina, "XXXXXXXX-XXXX-XXXX");
    for (int i = 0; i < MAX_ID_MAQUINA_LENGTH; i++) {
      EEPROM.write(EEPROM_ADDR_ID_MAQUINA + i, idMaquina[i]);
    }
    EEPROM.commit();
  } else {
    // Recupera o ID da máquina da EEPROM
    for (int i = 0; i < MAX_ID_MAQUINA_LENGTH; i++) {
      idMaquina[i] = EEPROM.read(EEPROM_ADDR_ID_MAQUINA + i);
    }
  }
  idMaquina[MAX_ID_MAQUINA_LENGTH - 1] = '\0';


  // Verifica se o store ID está vazio
  if (EEPROM.read(EEPROM_ADDR_STORE_ID) == 255)
  {
    strcpy(storeId, "00000000");
    for (int i = 0; i < MAX_STORE_ID_LENGTH; i++) {
      EEPROM.write(EEPROM_ADDR_STORE_ID + i, storeId[i]);
    }
    EEPROM.commit();
  } else {
    // Recupera o store Id da EEPROM
    for (int i = 0; i < MAX_STORE_ID_LENGTH; i++) {
      storeId[i] = EEPROM.read(EEPROM_ADDR_STORE_ID + i);
    }
  }
  storeId[MAX_STORE_ID_LENGTH - 1] = '\0';

  // Verifica se o email está vazio
  if (EEPROM.read(EEPROM_ADDR_EMAIL) == 255)
  {
    strcpy(email, "email@dominio.com");  // Email padrão
    for (int i = 0; i < MAX_EMAIL_LENGTH; i++) {
      EEPROM.write(EEPROM_ADDR_EMAIL + i, email[i]);
    }
    EEPROM.commit();
  } else {
    for (int i = 0; i < MAX_EMAIL_LENGTH; i++) {
      email[i] = EEPROM.read(EEPROM_ADDR_EMAIL + i);
    }
  }
  email[MAX_EMAIL_LENGTH - 1] = '\0';


  // Verifica se a URL está vazio
  if (EEPROM.read(EEPROM_ADDR_URL) == 255)
  {
    strcpy(url, "www.bluepaypag.com");
    for (int i = 0; i < MAX_URL_LENGTH; i++) {
      EEPROM.write(EEPROM_ADDR_URL + i, url[i]);
    }
    EEPROM.commit();
  } else {
    // Recupera a URL da EEPROM
    for (int i = 0; i < MAX_URL_LENGTH; i++) {
      url[i] = EEPROM.read(EEPROM_ADDR_URL + i);
    }
  }
  url[MAX_URL_LENGTH - 1] = '\0';
  //---------------------------------------------------------------------//

  // Adiciona parâmetros de configuração
  maquinaUUID = String(idMaquina);
  WiFiManagerParameter custom_idMaq("idMaq", "ID Maquina", maquinaUUID.c_str(), MAX_ID_MAQUINA_LENGTH);
  wm.addParameter(&custom_idMaq);
  
  tempoPulsoPrint = String(tempoPulso); 
  WiFiManagerParameter custom_pulso("pulso", "Tempo Pulso 1-999(ms)", tempoPulsoPrint.c_str(), 5);
  wm.addParameter(&custom_pulso);

  storeIdPrint = String(storeId); 
  WiFiManagerParameter custom_storeID("storeID", "Store ID Mercado Pago:", storeIdPrint.c_str(), 9);
  wm.addParameter(&custom_storeID);

  emailPrint = String(email);  
  WiFiManagerParameter custom_email("email", "Email:", emailPrint.c_str(), MAX_EMAIL_LENGTH); 
  wm.addParameter(&custom_email);

  urlPrint = String(url);  
  WiFiManagerParameter custom_url("url", "Url:", urlPrint.c_str(), MAX_URL_LENGTH); 
  wm.addParameter(&custom_url);

  // Tenta conectar-se à rede WiFi

  //  Inicio  Allex - Tela OLED FUNCIONAL ------------------------------------------------------------------------
    display.clearDisplay();
    display.display();  
    // Configura os parâmetros da animação
    int logoWidth = 110;
    int logoHeight = 28;
    int x = (SCREEN_WIDTH - logoWidth) / 2;
    int y = (SCREEN_HEIGHT - logoHeight) / 2 + 3;
    int rectX = x - 5;
    int rectY = y - 5;
    int rectWidth = logoWidth + 10;
    int rectHeight = logoHeight + 10;
    int radius = 5;
    // Animação de entrada
    for (int i = 0; i <= rectWidth; i += 2) 
    {
      display.clearDisplay();
      
      // Desenha o retângulo com bordas arredondadas gradualmente
      display.drawRoundRect(
        rectX, rectY,
        i, rectHeight,
        radius,
        SSD1306_WHITE
      );
      
      // Desenha o retângulo restante
      if (i >= logoWidth + 10) 
      {
        display.drawRoundRect(
          rectX, rectY,
          logoWidth + 10, rectHeight,
          radius,
          SSD1306_WHITE
        );
        
        // Desenha o logo depois que o retângulo está completo
        display.drawBitmap(
          x,
          y,
          logo_inicial,
          logoWidth,
          logoHeight,
          SSD1306_WHITE
        );
        // Aguarda 2 segundos após o logo ser desenhado
        display.display();
        delay(3000);
      }

        display.display();
        delay(30);  // Ajuste a velocidade da animação conforme necessário
    }

    // Limpa o buffer do display
    display.clearDisplay();
    // Desenha a imagem no display OLED
    display.drawBitmap(0, 0, acesse_wifi, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
    // Exibe o conteúdo do buffer no display
    display.display();    
  //  Final   Allex - Tela OLED FUNCIONAL ------------------------------------------------------------------------

  wm.setConfigPortalTimeout(300); //restarta coneção em 5 min. Tempo maior para configurar id da maquina
  String ssid = "Blue Pay Pag";// + String(maquinaUUID.substring(maquinaUUID.length() - 10));
  if (!wm.autoConnect(ssid.c_str(), "1234567890")) 
  {
    Serial.println("Falha ao conectar-se à rede WiFi.");
  } 
  else 
  {
    Serial.println("Conectado a rede WiFi.");
  }
  
  // Atualiza o ID da máquina e o tempo de pulso na EEPROM
  maquinaUUID = custom_idMaq.getValue();
  maquinaUUID.toCharArray(idMaquina, MAX_ID_MAQUINA_LENGTH);
  EEPROM.put(EEPROM_ADDR_ID_MAQUINA, idMaquina);
  EEPROM.commit();
  Serial.println("ID Maquina: " + String(idMaquina));

  tempoPulso = atoi(custom_pulso.getValue());
  EEPROM.put(EEPROM_ADDR_TEMPO_PULSO, tempoPulso);
  EEPROM.commit();
  Serial.println("Tenpo pulso(ms): " + String(tempoPulso));

  String storeIdStr = custom_storeID.getValue();
  storeIdStr.toCharArray(storeId, MAX_STORE_ID_LENGTH);
  EEPROM.put(EEPROM_ADDR_STORE_ID, storeId);
  EEPROM.commit();
  Serial.println("store ID: " + String(storeId));

  String emailStr = custom_email.getValue();
  emailStr.toCharArray(email, MAX_EMAIL_LENGTH);
  EEPROM.put(EEPROM_ADDR_EMAIL, email);
  EEPROM.commit();
  Serial.println("Email: " + String(email));

  serverUrl = custom_url.getValue();
  serverUrl.toCharArray(url, MAX_URL_LENGTH);
  EEPROM.put(EEPROM_ADDR_URL, url);
  EEPROM.commit();
  Serial.println("Url: " + String(url));
  

  //Mensagem caso conexao Ok

  //  Inicio  Allex - Aviso no Displar OK  ---------------------------------------------------------------------------------
    display.clearDisplay();

    // Desenha a imagem no display OLED
    display.drawBitmap(0, 0, conectado_wifi, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);

    // Define o tamanho da fonte
    display.setTextSize(1);  // Tamanho da fonte
    display.setTextColor(SSD1306_WHITE);  // Cor da fonte
    // Define o Local a ser Impresso o IP
    display.setCursor(25, 35);  // Posição do texto no display  
    display.print(WiFi.localIP()); // Exibe o IP local do WiFi
    display.display();  // Atualiza o display com o conteúdo

    delay(3000);
  //  Final   Allex - Aviso no Displar OK  ---------------------------------------------------------------------------------

  //telemetriaClienteRemoto();
}   //  Final   VOID  CONEXÃO WI-FI ----------------------------------------------------------------------------------------

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) // ok
{   //  Inicio  VOID  WEBSOCKET -------------------------------------------------------------------------------------------
    switch(type) {
        case WStype_DISCONNECTED:
            Serial.println("WebSocket desconectado, VOID WebSocket");
            conectado = false;
            break;
        case WStype_CONNECTED:
            Serial.println("WebSocket conectado, VOID WebSocket");
            conectado = true;
            // Enviar uma mensagem ao conectar
            webSocket.sendTXT("{\"command\":\"subscribe\",\"identifier\":\"{\\\"channel\\\":\\\"MachineChannel\\\"}\"}");
            break;
        /*case WStype_TEXT:
            Serial.printf("Mensagem recebida: %s\n", payload);
            break;
        */
        case WStype_TEXT:
            // Converte o payload para uma string
            String payloadStr = String((char *)payload);

            // Cria um objeto de JSON para o payload principal
            DynamicJsonDocument doc(1024); // Ajuste o tamanho conforme necessário
            DeserializationError error = deserializeJson(doc, payloadStr);

            if (error) {
                Serial.printf("Falha ao analisar JSON: %s\n", error.c_str());
                return;
            }

            // Acessa os dados do JSON principal
            String identifierStr = doc["identifier"].as<String>();
            JsonObject message = doc["message"].as<JsonObject>();

            // O campo "identifier" é uma string JSON, então você precisa analisar isso também
            DynamicJsonDocument identifierDoc(256); // Ajuste o tamanho conforme necessário
            error = deserializeJson(identifierDoc, identifierStr);

            if (error) {
                Serial.printf("Falha ao analisar JSON do identifier: %s\n", error.c_str());
                return;
            }

            // Acessa o comando da mensagem
            String command = message["command"].as<String>();

            webpayload = command.toInt(); // Não Mexer!


            //Serial.println(command); // Exibe o valor do comando DIRETO! "PING"

            if (command != NULL && command != "" && command != "null" &&  command != "0") // Desativa o "PING"
            {
              Serial.println(command); // Exibe o valor do comando
            }
            else
            {
              command = "0";
            }             

          break;   
    }
}   //  Final   VOID  WEBSOCKET --------------------------------------------------------------------------------------------

void ReceberEmEspecie() // ok
{   //  Inicio  VOID  ENVIO DO DINHEIRO PARA SERVIDOR: ----------------------------------------------------------------------
  
  webSocket.sendTXT("{\"command\":\"message\",\"identifier\":\"{\\\"channel\\\":\\\"MachineChannel\\\"}\", \"data\": \"{\\\"action\\\": \\\"send_esp\\\", \\\"especie\\\": \\\"" + String(credito) + "\\\", \\\"estoque\\\": \\\"" + String(decremento) + "\\\"}\"}");
        
  // ----------------------------------------------------------------------- Tela Funcional Allex
  tempo_LCD = 50; // tela LCD 5 segundos 
  // Limpa o buffer do display
  display.clearDisplay();
  // Desenha a imagem no display OLED
  display.drawBitmap(0, 0, envio_especie, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  // Define o tamanho da fonte
  display.setTextSize(2);  // Tamanho da fonte
  display.setTextColor(SSD1306_WHITE);  // Cor da fonte
  // Define o Local a ser Impresso o IP
  display.setCursor(60, 30);  // Posição do texto no display  
  display.print(credito); // Exibe o IP local do WiFi
  display.display();  // Atualiza o display com o conteúdo
  // ----------------------------------------------------------------------- Tela Funcional Allex
    
    

  
  EEPROM.put(EEPROM_ADDR_CREDITO, 0);
  EEPROM.commit();
  credito = 0; //APÓS O ENVIO ZERAR A VARIAVE
      
}   //  Final   VOID  FIM ENVIO DO DINHEIRO PARA SERVIDOR:  ------------------------------------------------------------------------

void DecrementarEstoque() // ok
{   //  Inicio  VOID   ENVIO DO DECREMENTO PARA SERVIDOR: (BAIXAR ESTOQUE) ------------------------------------------------------
    

  webSocket.sendTXT("{\"command\":\"message\",\"identifier\":\"{\\\"channel\\\":\\\"MachineChannel\\\"}\", \"data\": \"{\\\"action\\\": \\\"send_esp\\\", \\\"especie\\\": \\\"" + String(credito) + "\\\", \\\"estoque\\\": \\\"" + String(decremento) + "\\\"}\"}");
        
    
  tempo_LCD = 50; // tela LCD 5 segundos 
  // Limpa o buffer do display
  display.clearDisplay();
  // Desenha a imagem no display OLED
  display.drawBitmap(0, 0, envio_estoque, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  // Define o tamanho da fonte
  display.setTextSize(2);  // Tamanho da fonte
  display.setTextColor(SSD1306_WHITE);  // Cor da fonte
  // Define o Local a ser Impresso o IP
  display.setCursor(60, 30);  // Posição do texto no display  
  display.print(decremento); // Exibe o IP local do WiFi
  display.display();  // Atualiza o display com o conteúdo
          

  EEPROM.put(EEPROM_ADDR_DECREMENTO, 0);
  EEPROM.commit();
  decremento=0; // APÓS O ENVIO ZERAR VARIAVEL.
      

   
}   //  Final   VOID   ENVIO DO DECREMENTO PARA SERVIDOR: --------------------------------------------------------------------------

void Task1code( void * pvParameters ) // ok
{   //  Inicio  VOID  PRIMEIRA TAREFA A SER EXECUTADA:
  Serial.print("Tarefa 1 iniciada no processador: ");
  Serial.println(xPortGetCoreID());

  for(;;)
  {   
    debouncer_especie.update();     // Atualiza o estado do botão
    debouncer_decrementar.update(); // Atualiza o estado do botão

    // RECEPÇÃO DE DINHEIRO ------------------------------------------------------
    if (debouncer_especie.fell()) // Daniel
    {
      if(!lendoPix) //CREDITO VINDO DO PIX EU NÃO DEIXO ELE REGISTRAR EM DINHEIRO
      { 
        credito++;          
        Serial.print("Credito Recebido: ");
        Serial.println(credito);
        fimCredito = 1000;
        

        if (led_B_State == LOW)         
          led_B_State = HIGH;        
        else         
          led_B_State = LOW;        

        digitalWrite(led_B, led_B_State);  //LED AZUL - PISCANDO: Dinheiro Creditado;
        digitalWrite(led_G, LOW);
        digitalWrite(led_R, LOW);                
      }      
    }
    else if(fimCredito > 0)
    {
      fimCredito--;
      if(fimCredito == 1)
      {         
        EEPROM.put(EEPROM_ADDR_CREDITO, credito);
        EEPROM.commit();
        fimCredito = 0;

        led_B_State = LOW; 
        digitalWrite(led_B, LOW);
      }
    }
    //---------------------------------------------------------------------------

    // BAIXAR ESTOQUE ---------------------------------
    if (debouncer_decrementar.fell()) // Daniel
    { 
      decremento++; // DECREMENTAR 1
      Serial.print("Decremento Recebido: ");
      Serial.println(decremento);
      
      fimDecremento = 1000;
    }
    else if(fimDecremento > 0)
    {
      fimDecremento--;

      //LED VERDE e AZUL PISCANDO: Baixar no Estoque.
      digitalWrite(led_R, LOW); 
      if(fimDecremento > 800)
      {
        digitalWrite(led_B, LOW);  
        digitalWrite(led_G, LOW);
      }
      else if(fimDecremento > 600)
      {
        digitalWrite(led_B, LOW);  
        digitalWrite(led_G, HIGH);
      }
      else if(fimDecremento > 400)
      {
        digitalWrite(led_B, LOW);  
        digitalWrite(led_G, LOW);
      }
      else if(fimDecremento > 200)
      {
        digitalWrite(led_B, HIGH);  
        digitalWrite(led_G, LOW);
      }
      else if(fimDecremento > 1)
      {
        digitalWrite(led_B, LOW);  
        digitalWrite(led_G, LOW);
      }
      else if(fimDecremento == 1)
      {
        EEPROM.put(EEPROM_ADDR_DECREMENTO, decremento);
        EEPROM.commit();
        fimDecremento = 0;
      }    
    }
    //-------------------------------------------------

    // RESET WI-FI ------------------------------------
    if (digitalRead(resetWifi) == LOW) // Daniel
    {
      contResetWifi++;

      if(contResetWifi >= 5000) 
      {
        Serial.print("tempo botão ResetWifi pressionado: ");
        Serial.println(contResetWifi);

        Serial.print("Resetando WI-FI!");
        wm.resetSettings();    
          
        while(digitalRead(resetWifi) == LOW)
        {  

          
                  

          //LED VM e VD piscanco indica reset concluido
          digitalWrite(led_G, HIGH);
          digitalWrite(led_R, LOW);
          delay(250);
          digitalWrite(led_G, LOW);
          digitalWrite(led_R, HIGH);
          delay(250);
        } 
        ESP.restart();        
      }
    }
    else
    {      
      if(contResetWifi >= 100)
      {
        Serial.print("tempo botão ResetWifi pressionado: ");
        Serial.println(contResetWifi);

        Serial.print("Iniciando Captive Portal!");



        ESP.restart();
        //setupWiFi(); 
        
        contResetWifi = 0;    
      }
      else if(contResetWifi > 0)
      {        
        contResetWifi--;
      }
    }
    //-------------------------------------------------
    
    delay(1); // Pequena pausa para evitar um loop muito rápido
 } 
 // Fim Primeira Tarefa
}   //  Final   VOID  PRIMEIRA TAREFA A SER EXECUTADA:

/*void Task2code(void * pvParameters) // funcional
{
    Serial.print("Tarefa 2 iniciada no processador: ");
    Serial.println(xPortGetCoreID());

    for (;;) 
    {
        valor2 = webpayload; // Atribuindo webpayload a valor2
        webpayload = 0;
        if (valor2 > 0 && valor2 < 100) 
        { 
          Serial.println("Valor recebido do servidor: " + String(valor2));
          tempo_LCD = valor2 * tempoPulso / 50; // tela LCD 5 segundos 
          Serial.println("Tempo LCD: " + String(tempo_LCD));
          // Limpa o buffer do display
          display.clearDisplay();
          // Desenha a imagem no display OLED
          display.drawBitmap(0, 0, pix_cartao, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
          // Define o tamanho da fonte
          display.setTextSize(2);  // Tamanho da fonte
          display.setTextColor(SSD1306_WHITE);  // Cor da fonte
          // Define o Local a ser Impresso o IP
          display.setCursor(60, 30);  // Posição do texto no display  
          display.print(valor2); // Exibe o IP local do WiFi
          display.display();  // Atualiza o display com o conteúdo

          for (int i = 0; i < valor2; i++) {
              lendoPix = true; 
              Serial.println("Pulso #" + String(i + 1));
              
              // Simulação de pulso
              digitalWrite(led_G, HIGH);  // LED VERDE - PISCANDO: PIX;
              digitalWrite(rele, HIGH);
              vTaskDelay(pdMS_TO_TICKS(tempoPulso)); // Tempo de desativação do pulso                
              digitalWrite(led_G, LOW);
              digitalWrite(rele, LOW);
              vTaskDelay(pdMS_TO_TICKS(tempoPulso)); // Tempo de desativação do pulso
          }

          valor2 = 0; // Resetando valor2 após a operação        
          lendoPix = false; // LIBERO NOTEIRO
        } 
        else 
        {
            if (WiFi.status() == WL_CONNECTED) 
            {
                if (credito > 0 && fimCredito == 0) 
                {
                    ReceberEmEspecie();          
                } 
                else if (decremento > 0 && fimDecremento == 0) 
                {
                    DecrementarEstoque(); 
                }

                // Ativação/desativação dos pinos baseados no payload
                switch (valor2) 
                {
                    
                  case 5555:                
                    digitalWrite(cima, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300)); // Mantém ativo por 300ms                                        
                    digitalWrite(cima, LOW);
                    break;
                  case 5566:
                    digitalWrite(cima, HIGH);
                    digitalWrite(direita, HIGH);                    
                    vTaskDelay(pdMS_TO_TICKS(300)); 
                    digitalWrite(cima, LOW);
                    digitalWrite(direita, LOW);
                    break;
                  case 6666:
                    digitalWrite(direita, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300));                    
                    digitalWrite(direita, LOW);
                    break;
                  case 6677:
                    digitalWrite(direita, HIGH);
                    digitalWrite(baixo, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300)); 
                    digitalWrite(direita, LOW);
                    digitalWrite(baixo, LOW);
                    break;
                  case 7777:
                    digitalWrite(baixo, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300));
                    digitalWrite(baixo, LOW);
                    break;
                  case 7788:
                    digitalWrite(baixo, HIGH);
                    digitalWrite(esquerda, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300)); 
                    digitalWrite(baixo, LOW);
                    digitalWrite(esquerda, LOW);
                    break;
                  case 8888:
                    digitalWrite(esquerda, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300));
                    digitalWrite(esquerda, LOW);
                    break;
                  case 8855:
                    digitalWrite(esquerda, HIGH);
                    digitalWrite(cima, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300)); 
                    digitalWrite(esquerda, LOW);
                    digitalWrite(cima, LOW);
                    break;
                  case 9999:
                    digitalWrite(centro, HIGH);
                    vTaskDelay(pdMS_TO_TICKS(300));            
                    digitalWrite(centro, LOW);
                    break;
                    case 111:
                    digitalWrite(configura, HIGH);
                    Serial.println("Botao 1111 Configura");
                    vTaskDelay(pdMS_TO_TICKS(300));            
                    digitalWrite(configura, LOW);
                    break;
                  case 444:                                        
                    Serial.println("Botao 4444 Tela Joystick");

                    // Alterna o estado do joystick
                    estadoJoystick = estadoJoystick == HIGH ? LOW : HIGH; // Atualiza a variável
                    digitalWrite(joystick, estadoJoystick); // Aplica a mudança

                    // Alterna o estado da tela
                    estadoTela = estadoTela == HIGH ? LOW : HIGH; // Atualiza a variável
                    digitalWrite(tela, estadoTela); // Aplica a mudança
                    break;                  
                  case 333:                     
                    estadoJoystick = estadoJoystick == HIGH ? LOW : HIGH; // Atualiza a variável
                    digitalWrite(joystick, estadoJoystick); // Aplica a mudança
                    break;                    
                  case 222:                     
                    estadoTela = estadoTela == HIGH ? LOW : HIGH; // Atualiza a variável
                    digitalWrite(tela, estadoTela); // Aplica a mudança
                    break;                    
                default:
                  // Para estados inválidos ou nenhum payload, desative todos os pinos
                  break;
                }

                // Resetar o valor2 após o processamento do payload
                valor2 = 0; 
            } 
            else 
            {
                WiFi.reconnect(); // Reconectar Wi-Fi
                vTaskDelay(pdMS_TO_TICKS(5000));
            }
        }

        vTaskDelay(pdMS_TO_TICKS(1)); // Pequena pausa para evitar um loop muito rápido
    }
}
*/


void Task2code(void * pvParameters) 
{
    Serial.print("Tarefa 2 iniciada no processador: ");
    Serial.println(xPortGetCoreID());

    for (;;) 
    {
        valor2 = webpayload; // Atribuindo webpayload a valor2
        webpayload = 0;
        
        if (valor2 > 0 && valor2 < 100) 
        { 
            Serial.println("Valor recebido do servidor: " + String(valor2));
            tempo_LCD = valor2 * tempoPulso / 50; // tela LCD 5 segundos 
            Serial.println("Tempo LCD: " + String(tempo_LCD));
            // Limpa o buffer do display
            display.clearDisplay();
            // Desenha a imagem no display OLED
            display.drawBitmap(0, 0, pix_cartao, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
            // Define o tamanho da fonte
            display.setTextSize(2);  // Tamanho da fonte
            display.setTextColor(SSD1306_WHITE);  // Cor da fonte
            // Define o Local a ser Impresso o IP
            display.setCursor(60, 30);  // Posição do texto no display  
            display.print(valor2); // Exibe o IP local do WiFi
            display.display();  // Atualiza o display com o conteúdo

            for (int i = 0; i < valor2; i++) {
                lendoPix = true; 
                Serial.println("Pulso #" + String(i + 1));
                
                // Simulação de pulso
                digitalWrite(led_G, HIGH);  // LED VERDE - PISCANDO: PIX;
                digitalWrite(rele, HIGH);
                vTaskDelay(pdMS_TO_TICKS(tempoPulso)); // Tempo de desativação do pulso                
                digitalWrite(led_G, LOW);
                digitalWrite(rele, LOW);
                vTaskDelay(pdMS_TO_TICKS(tempoPulso)); // Tempo de desativação do pulso
            }

            valor2 = 0; // Resetando valor2 após a operação        
            lendoPix = false; // LIBERO NOTEIRO
        } 
        else 
        {
            if (WiFi.status() == WL_CONNECTED) 
            {
                if (credito > 0 && fimCredito == 0) 
                {
                    ReceberEmEspecie();          
                } 
                else if (decremento > 0 && fimDecremento == 0) 
                {
                    DecrementarEstoque(); 
                }

                // Verifica se há decremento a ser enviado
                int storedDecremento = 0; // Variável para armazenar o decremento recuperado
                EEPROM.get(EEPROM_ADDR_DECREMENTO, storedDecremento);
                if (storedDecremento > 0) {
                    // Verifica se o WebSocket está conectado antes de tentar enviar
                    if (webSocket.isConnected()) {
                        // Enviar o decremento armazenado
                        if (webSocket.sendTXT("{\"command\":\"message\",\"identifier\":\"{\\\"channel\\\":\\\"MachineChannel\\\"}\", \"data\": \"{\\\"action\\\": \\\"send_esp\\\", \\\"estoque\\\": \\\"" + String(storedDecremento) + "\\\"}\"}")) {
                            Serial.println("Decremento enviado com sucesso.");
                            // Zerar o valor na EEPROM após envio bem-sucedido
                            storedDecremento = 0; // Zerar a variável local
                            EEPROM.put(EEPROM_ADDR_DECREMENTO, storedDecremento); // Atualiza na EEPROM
                            EEPROM.commit(); // Salva as alterações
                        } else {
                            Serial.println("Falha ao enviar o decremento.");
                        }
                    } else {
                        Serial.println("WebSocket não está conectado. Tentando reconectar...");
                        // Tente reconectar o WebSocket aqui, se necessário
                        IniciaWebSocket(); // Adicione esta função se necessário
                    }
                }

                // Ativação/desativação dos pinos baseados no payload
                switch (valor2) 
                {
                    case 5555:                
                        digitalWrite(cima, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300)); // Mantém ativo por 300ms                                        
                        digitalWrite(cima, LOW);
                        break;
                    case 5566:
                        digitalWrite(cima, HIGH);
                        digitalWrite(direita, HIGH);                    
                        vTaskDelay(pdMS_TO_TICKS(300)); 
                        digitalWrite(cima, LOW);
                        digitalWrite(direita, LOW);
                        break;
                    case 6666:
                        digitalWrite(direita, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300));                    
                        digitalWrite(direita, LOW);
                        break;
                    case 6677:
                        digitalWrite(direita, HIGH);
                        digitalWrite(baixo, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300)); 
                        digitalWrite(direita, LOW);
                        digitalWrite(baixo, LOW);
                        break;
                    case 7777:
                        digitalWrite(baixo, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300));
                        digitalWrite(baixo, LOW);
                        break;
                    case 7788:
                        digitalWrite(baixo, HIGH);
                        digitalWrite(esquerda, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300)); 
                        digitalWrite(baixo, LOW);
                        digitalWrite(esquerda, LOW);
                        break;
                    case 8888:
                        digitalWrite(esquerda, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300));
                        digitalWrite(esquerda, LOW);
                        break;
                    case 8855:
                        digitalWrite(esquerda, HIGH);
                        digitalWrite(cima, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300)); 
                        digitalWrite(esquerda, LOW);
                        digitalWrite(cima, LOW);
                        break;
                    case 9999:
                        digitalWrite(centro, HIGH);
                        vTaskDelay(pdMS_TO_TICKS(300));            
                        digitalWrite(centro, LOW);
                        break;
                    case 111:
                        digitalWrite(configura, HIGH);
                        Serial.println("Botao 1111 Configura");
                        vTaskDelay(pdMS_TO_TICKS(300));            
                        digitalWrite(configura, LOW);
                        break;
                    case 444:                                        
                        Serial.println("Botao 4444 Tela Joystick");

                        // Alterna o estado do joystick
                        estadoJoystick = estadoJoystick == HIGH ? LOW : HIGH; // Atualiza a variável
                        digitalWrite(joystick, estadoJoystick); // Aplica a mudança

                        // Alterna o estado da tela
                        estadoTela = estadoTela == HIGH ? LOW : HIGH; // Atualiza a variável
                        digitalWrite(tela, estadoTela); // Aplica a mudança
                        break;                  
                    case 333:                     
                        estadoJoystick = estadoJoystick == HIGH ? LOW : HIGH; // Atualiza a variável
                        digitalWrite(joystick, estadoJoystick); // Aplica a mudança
                        break;                    
                    case 222:                     
                        estadoTela = estadoTela == HIGH ? LOW : HIGH; // Atualiza a variável
                        digitalWrite(tela, estadoTela); // Aplica a mudança
                        break;                    
                    default:
                        // Para estados inválidos ou nenhum payload, desative todos os pinos
                        break;
                }

                // Resetar o valor2 após o processamento do payload
                valor2 = 0; 
            } 
            else 
            {
                WiFi.reconnect(); // Reconectar Wi-Fi
                vTaskDelay(pdMS_TO_TICKS(5000));
            }
        }

        vTaskDelay(pdMS_TO_TICKS(1)); // Pequena pausa para evitar um loop muito rápido
    }
}


// FIM DAS TAREFAS

void loop() // ok
{
  
  unsigned long currentMillis = millis();
  if (currentMillis - lastMessageTime >= intervalMessage) 
  {
    // Atualize o tempo da última mensagem
    lastMessageTime = currentMillis;
    
    // Envie a mensagem
    webSocket.sendTXT("{\"command\":\"message\",\"identifier\":\"{\\\"channel\\\":\\\"MachineChannel\\\"}\", \"data\": \"{\\\"action\\\": \\\"is_online\\\", \\\"status\\\": \\\"true\\\"}\"}");
    //Serial.println("Mensagem enviada");
  }

  //esp_task_wdt_reset();
  webSocket.loop(); // Processa a comunicação WebSocket
  delay(100);
  StatusWifi();
  
  // Monitorar a memória livre
  // Serial.print("Memória livre: ");
  // Serial.println(ESP.getFreeHeap());

  if(tempo_LCD > 0)
  {
    tempo_LCD--;
  }
  
}
